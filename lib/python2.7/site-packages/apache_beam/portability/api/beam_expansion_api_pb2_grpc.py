from __future__ import absolute_import
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
from builtins import object
import grpc

from . import beam_expansion_api_pb2 as beam__expansion__api__pb2


class ExpansionServiceStub(object):
  """Job Service for constructing pipelines
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Expand = channel.unary_unary(
        '/org.apache.beam.model.expansion.v1.ExpansionService/Expand',
        request_serializer=beam__expansion__api__pb2.ExpansionRequest.SerializeToString,
        response_deserializer=beam__expansion__api__pb2.ExpansionResponse.FromString,
        )


class ExpansionServiceServicer(object):
  """Job Service for constructing pipelines
  """

  def Expand(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExpansionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Expand': grpc.unary_unary_rpc_method_handler(
          servicer.Expand,
          request_deserializer=beam__expansion__api__pb2.ExpansionRequest.FromString,
          response_serializer=beam__expansion__api__pb2.ExpansionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'org.apache.beam.model.expansion.v1.ExpansionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
